{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jay-D21/Deep-Learning/blob/main/Reducing%20the%20bias%20and%20variance%20of%20a%20neural%20network\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Reducing the bias and variance of a neural network"
      ],
      "metadata": {
        "id": "ZGUPhdXUgaZ1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Importing Libraries"
      ],
      "metadata": {
        "id": "pQPzX-RQgWL2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "cVis9bHmfVG8"
      },
      "outputs": [],
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from keras.layers import LeakyReLU\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 1 : Set Global Seed for Reproducibility"
      ],
      "metadata": {
        "id": "YGZ3pOH2ivCx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def set_global_seed(seed: int = 42):\n",
        "  import random\n",
        "  random.seed(seed)\n",
        "  np.random.seed(seed)\n",
        "  tf.random.set_seed(seed)\n",
        "\n",
        "set_global_seed(42)"
      ],
      "metadata": {
        "id": "SdJA3DQ5haHU"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 2 : Prepare Synthetic Dataset"
      ],
      "metadata": {
        "id": "k3x4WxR5jWKo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def make_data(n_samples=2000,\n",
        "              n_features=20,\n",
        "              n_informative=15,\n",
        "              n_redundant=5,\n",
        "              test_size=0.2,\n",
        "              seed=42):\n",
        "\n",
        "  # Generate a synthetic dataset for binary classification\n",
        "  X, y = make_classification(\n",
        "      n_samples=n_samples,           # No. of data points\n",
        "      n_features=n_features,         # Total no. of features\n",
        "      n_informative=n_informative,   # Features that carry useful signal for classification.\n",
        "      n_redundant=n_redundant,       # Binary classification problem (labels: 0 or 1)\n",
        "      random_state=seed              # Ensures reproductivity\n",
        "  )\n",
        "\n",
        "  # Split dataset into training and testing sets\n",
        "  X_train, X_test, y_train, y_test = train_test_split(\n",
        "      X, y,\n",
        "      test_size=test_size,          # 20% data for testing, 80% for training\n",
        "      random_state=seed,            # Reproducibility of the split\n",
        "      stratify=y                    # Keep class distribution same in train and test\n",
        "  )\n",
        "\n",
        "  # Standardize features : zero mean and unit variance for faster convergence\n",
        "  scaler = StandardScaler()\n",
        "\n",
        "  # Fit Scaler on training set and transform both trainig and test sets\n",
        "  X_train_scaled = scaler.fit_transform(X_train)\n",
        "  X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "  # Return  Processed data\n",
        "  return X_train_scaled, X_test_scaled, y_train, y_test,\n",
        "\n",
        "# Call the function with default values\n",
        "X_train, X_test, y_train, y_test = make_data()\n",
        "\n",
        "# Determine number of input features for building the neural network input layer\n",
        "input_dim = X_train.shape[1]  # Gives number of columns in X_train"
      ],
      "metadata": {
        "id": "_JfX2W8ujce4"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim"
      ],
      "metadata": {
        "id": "2QvbAC7eolo7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "288cdab9-330c-4668-eb63-96e5f9f702aa"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 3 : Build Our Model"
      ],
      "metadata": {
        "id": "y3DkI1wko_IK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Function to build a feed-forward neural network for binary classification\n",
        "def build_model(input_dim,            # No. of input features (for input layer shape)\n",
        "                hidden_layers=2,      # No. of hidden layers in the network\n",
        "                units=32,             # No. of neurons per hidden layer\n",
        "                activation='relu',    # Activation function for hidden layers(e.g.,)\n",
        "                learning_rate=1e-3):\n",
        "\n",
        "  # Create a Sequential model (stack layers one after another)\n",
        "  model= Sequential()\n",
        "\n",
        "  # First hidden layer with input dimension specified\n",
        "  model.add(Dense(units,                   # No. of neurons in the first layer\n",
        "                  activation=activation,   # Apply activation function (ReLU by default)\n",
        "                  input_shape=(input_dim,))) # Shape of the input features (tuple)\n",
        "\n",
        "  # Add addition hidden layers (if hidden_layers > 1)\n",
        "  for _ in range(hidden_layers - 1):               # Loop for ramaining layers\n",
        "    model.add(Dense(units, activation=activation))\n",
        "\n",
        "  # Output layer with 1 neuron for binary classification\n",
        "  model.add(Dense(1, activation='sigmoid'))  # Single neuron\n",
        "\n",
        "  # Compile the model with:\n",
        "  # - Adam optimizer with specified learining rate\n",
        "  # - Binary Cross entropy loss (for binary classification)\n",
        "  # - Accuracy metric to evaluate performance\n",
        "  model.compile(optimizer=Adam(learning_rate=learning_rate),\n",
        "                loss='binary_crossentropy',\n",
        "                metrics=['accuracy'])\n",
        "\n",
        "  # Return the compiled model\n",
        "  return model"
      ],
      "metadata": {
        "id": "HYjsRgkbow74"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 4 : Training Utility with EarlyStopping"
      ],
      "metadata": {
        "id": "t6BGgszesu73"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Function to train a given model with early stopping for better generalization\n",
        "def train_model(model,\n",
        "                X_train, y_train,\n",
        "                X_val, y_val,\n",
        "                epochs=20,\n",
        "                batch_size=32,\n",
        "                patience=5):\n",
        "\n",
        "  # Create an EarlyStopping callback to prevent overfitting\n",
        "  early_stop = EarlyStopping(\n",
        "      monitor='val_loss',           # Metric to monitor (validation loss)\n",
        "      patience=patience,            # Stop training if no imporvement for 'patience' epochs\n",
        "      restore_best_weights=True     # Restore the best model weights from the epoch with loss\n",
        "  )\n",
        "\n",
        "  # Train the model using .fit() method\n",
        "  history = model.fit(\n",
        "      X_train, y_train,\n",
        "      validation_data=(X_val, y_val),\n",
        "      epochs=epochs,\n",
        "      batch_size=batch_size,\n",
        "      callbacks=[early_stop],\n",
        "      verbose=0\n",
        "    )\n",
        "\n",
        "  # Return the History object which contains training metrics per epoch\n",
        "  return history\n"
      ],
      "metadata": {
        "id": "VUA4Daqzq4iF"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 5 : Plotting Learning Curves"
      ],
      "metadata": {
        "id": "THFUMRXLubzo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_histories(histories, metric='val_accuracy', title='Validation Accuracy Comparison'):\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    for label, hist in histories.items():\n",
        "        plt.plot(hist.history.get(metric, []), label=label)\n",
        "    plt.title(title)\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel(metric.replace('_',' ').title())\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "NtymZOmHuaha"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 6 : Run Experiments and Compare Models"
      ],
      "metadata": {
        "id": "WZvntRI81Z8A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "baseline = build_model(input_dim, hidden_layers=1, units=32, activation='relu')\n",
        "hist_base = train_model(baseline, X_train, y_train, X_test, y_test, epochs=20)"
      ],
      "metadata": {
        "id": "Xzbhx2vHuulo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "69661cdb-9d13-4102-e934-79d294da243c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "baseline.evaluate(X_test, y_test, verbose=0)[1]"
      ],
      "metadata": {
        "id": "iC6yg-b2wFqD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce846c0f-ea2c-4f5b-d903-8c4df83c830d"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9449999928474426"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the baseline model\n",
        "baseline_50_epochs = build_model(input_dim, hidden_layers=1, units=32, activation='relu')\n",
        "\n",
        "hist_base_50_epochs = train_model(baseline_50_epochs, X_train, y_train, X_test, y_test, epochs=50)"
      ],
      "metadata": {
        "id": "KjNn4FvYyVRY"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "baseline_accuracy = baseline_50_epochs.evaluate(X_test, y_test, verbose=0)[1]\n",
        "baseline_accuracy"
      ],
      "metadata": {
        "id": "D5y5BDVpyVOf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9eaeca0e-02ba-4619-9c6a-25100d631ac5"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9674999713897705"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "baseline = build_model(input_dim, hidden_layers=1, units=32, activation='relu')\n",
        "hist_base = train_model(baseline, X_train, y_train, X_test, y_test, epochs=20)"
      ],
      "metadata": {
        "id": "YKoUySf70ItY"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "baseline.evaluate(X_test, y_test, verbose=0)[1]"
      ],
      "metadata": {
        "id": "m5MUCJ4e0MOY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49873eec-c247-4b66-e04b-0928e52f877d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9449999928474426"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f3e4bc36"
      },
      "source": [
        "deeper = build_model(input_dim, hidden_layers=3, units=64, activation='relu')\n",
        "hist_deeper = train_model(deeper, X_train, y_train, X_test, y_test, epochs=20)"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "deeper.evaluate(X_test, y_test, verbose=0)[1]"
      ],
      "metadata": {
        "id": "nzyJnqD00NbD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7607942-d6ac-4d1b-f3e5-9586bd7dfd7a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9474999904632568"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5a7b6294"
      },
      "source": [
        "def build_leaky_relu_model(input_dim,\n",
        "                           hidden_layers=2,\n",
        "                           units=32,\n",
        "                           learning_rate=1e-3,\n",
        "                           leaky_alpha=0.01):\n",
        "\n",
        "    model = Sequential()\n",
        "\n",
        "    # First hidden layer with Leaky ReLU\n",
        "    model.add(Dense(units, input_shape=(input_dim,)))\n",
        "    model.add(LeakyReLU(alpha=leaky_alpha))\n",
        "\n",
        "    # Add additional hidden layers with Leaky ReLU\n",
        "    for _ in range(hidden_layers - 1):\n",
        "        model.add(Dense(units))\n",
        "        model.add(LeakyReLU(alpha=leaky_alpha))\n",
        "\n",
        "    # Output layer with sigmoid activation for binary classification\n",
        "    model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "    # Compile the model\n",
        "    model.compile(optimizer=Adam(learning_rate=learning_rate),\n",
        "                  loss='binary_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "leaky = build_leaky_relu_model(input_dim, units=64)\n",
        "hist_leaky = train_model(leaky, X_train, y_train, X_test, y_test, epochs=50)"
      ],
      "metadata": {
        "id": "hO3VB3ms2Ish",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1b8f413e-4caa-4db2-b92b-b13132c94125"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/layers/activations/leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results = {\n",
        "    'Baseline': baseline.evaluate(X_test, y_test, verbose=0)[1],       # [1] gets accuracy from (loss, accuracy)\n",
        "    'More Epochs': baseline_50_epochs.evaluate(X_test, y_test, verbose=0)[1],\n",
        "    'More Layers': deeper.evaluate(X_test, y_test, verbose=0)[1],\n",
        "    'Leaky ReLU': leaky.evaluate(X_test, y_test, verbose=0)[1]\n",
        "}"
      ],
      "metadata": {
        "id": "sJ8eyvPo2gsJ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Test Accuracy Summary:\")\n",
        "for k, v in results.items():\n",
        "    print(f\"{k}: {v:.4f}\")"
      ],
      "metadata": {
        "id": "HJghaoAG2twx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0be25451-afc3-4ff8-e911-428827f820d0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy Summary:\n",
            "Baseline: 0.9450\n",
            "More Epochs: 0.9675\n",
            "More Layers: 0.9475\n",
            "Leaky ReLU: 0.9625\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "histories = {\n",
        "    'Baseline': hist_base,\n",
        "    'More Epochs': hist_base_50_epochs,\n",
        "    'More Layers': hist_deeper,\n",
        "    'Leaky ReLU': hist_leaky\n",
        "}"
      ],
      "metadata": {
        "id": "eq7kNjfa2yzB"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "942d1285",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "dc5133bc-1fe8-4e45-f73a-b5f502ed6158"
      },
      "source": [
        "plot_histories(histories)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}